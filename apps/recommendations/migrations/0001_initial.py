# Generated by Django 5.2.6 on 2025-09-13 17:48

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StyleVector',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='style_vector', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('vector_data', models.JSONField(default=dict, help_text="Vector representation of user's style preferences")),
                ('learning_rate', models.FloatField(default=0.1, help_text='Learning rate for EMA updates (0-1)')),
                ('total_feedback_count', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Style Vector',
                'verbose_name_plural': 'Style Vectors',
                'db_table': 'style_vectors',
            },
        ),
        migrations.CreateModel(
            name='OutfitSuggestion',
            fields=[
                ('suggestion_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prompt', models.TextField(help_text="User's style prompt (e.g., 'smart casual for dinner')")),
                ('location', models.CharField(blank=True, help_text='Location for weather context', max_length=255)),
                ('weather', models.JSONField(default=dict, help_text='Weather data used for the suggestion (temperature, condition, etc.)')),
                ('items_included', models.JSONField(default=list, help_text='List of clothing item IDs included in this suggestion')),
                ('outfit_structure', models.JSONField(default=dict, help_text='Structured representation of the outfit (tops, bottoms, shoes, etc.)')),
                ('ai_rationale', models.TextField(help_text="AI's explanation for why this outfit was suggested")),
                ('confidence_score', models.FloatField(blank=True, help_text='AI confidence score for this suggestion (0-1)', null=True)),
                ('model_version', models.CharField(blank=True, help_text='Version of the AI model used', max_length=50)),
                ('weather_score', models.FloatField(blank=True, null=True)),
                ('prompt_score', models.FloatField(blank=True, null=True)),
                ('color_harmony_score', models.FloatField(blank=True, null=True)),
                ('user_affinity_score', models.FloatField(blank=True, null=True)),
                ('recency_penalty', models.FloatField(blank=True, null=True)),
                ('final_score', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outfit_suggestions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Outfit Suggestion',
                'verbose_name_plural': 'Outfit Suggestions',
                'db_table': 'outfit_suggestions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationSession',
            fields=[
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('original_prompt', models.TextField()),
                ('location', models.CharField(blank=True, max_length=255)),
                ('weather_data', models.JSONField(default=dict)),
                ('processing_time_ms', models.IntegerField(blank=True, null=True)),
                ('wardrobe_items_considered', models.IntegerField(default=0)),
                ('total_combinations_scored', models.IntegerField(default=0)),
                ('suggestions_generated', models.IntegerField(default=0)),
                ('weather_api_called', models.BooleanField(default=False)),
                ('weather_api_response_time_ms', models.IntegerField(blank=True, null=True)),
                ('ai_api_called', models.BooleanField(default=False)),
                ('ai_api_response_time_ms', models.IntegerField(blank=True, null=True)),
                ('completed_successfully', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('suggestions', models.ManyToManyField(blank=True, related_name='sessions', to='recommendations.outfitsuggestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommendation Session',
                'verbose_name_plural': 'Recommendation Sessions',
                'db_table': 'recommendation_sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeatherCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(db_index=True, max_length=255)),
                ('weather_data', models.JSONField(default=dict)),
                ('api_provider', models.CharField(default='unknown', max_length=50)),
                ('cache_key', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'Weather Cache Entry',
                'verbose_name_plural': 'Weather Cache Entries',
                'db_table': 'weather_cache',
                'indexes': [models.Index(fields=['location', 'expires_at'], name='weather_cac_locatio_2f2456_idx'), models.Index(fields=['cache_key'], name='weather_cac_cache_k_0eb3c8_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='outfitsuggestion',
            index=models.Index(fields=['user', 'created_at'], name='outfit_sugg_user_id_154617_idx'),
        ),
        migrations.AddIndex(
            model_name='outfitsuggestion',
            index=models.Index(fields=['user', 'is_active'], name='outfit_sugg_user_id_9d76b9_idx'),
        ),
        migrations.AddIndex(
            model_name='outfitsuggestion',
            index=models.Index(fields=['confidence_score'], name='outfit_sugg_confide_331157_idx'),
        ),
        migrations.AddIndex(
            model_name='outfitsuggestion',
            index=models.Index(fields=['final_score'], name='outfit_sugg_final_s_57a3a3_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationsession',
            index=models.Index(fields=['user', 'created_at'], name='recommendat_user_id_19356b_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationsession',
            index=models.Index(fields=['completed_successfully'], name='recommendat_complet_cbcd07_idx'),
        ),
    ]
