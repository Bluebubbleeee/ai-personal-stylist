# AI-Powered Personal Stylist & Wardrobe Manager - Complete Project Steps

## PROJECT OVERVIEW
**Project Name**: AI-Powered Personal Stylist & Wardrobe Manager
**Framework**: Django (Python web framework)
**Type**: Web-based application with dynamic pages (NO React)
**Target**: Responsive, accessible web interface with WCAG 2.1 AA compliance

## CORE FEATURES TO IMPLEMENT

### 1. USER AUTHENTICATION & ACTIVATION
- User registration with email activation (required before login)
- Email-based activation token system (24-hour expiry)
- Password reset functionality with secure tokens
- Argon2id password hashing
- JWT-based session management
- Account lockout after repeated failed attempts
- Email templates for activation and password reset

### 2. WARDROBE MANAGEMENT SYSTEM
-Image upload with drag-and-drop interface
Single Computer Vision API call for:
	1. Auto-tagging
	2. Color detection and classification
	3. Category classification
-Manual tag editing and management
-Wardrobe item categories: tops, bottoms, shoes, accessories, etc.
-Color detection and classification using the computer vision
-Local image storage with thumbnails (stored in /media/ directory on server)
-CRUD operations for wardrobe items
-Soft delete with 30-day grace period

### 3. SEARCH & FILTERING
- Real-time search functionality with fuzzy matching
- Filter by category, color, tags
- Pagination (20 items per page)
- Filter persistence during session

### 4. "STYLE ME" RECOMMENDATION ENGINE
-Weather-based outfit recommendations (using weather API, keep a placeholder for it)
-User prompt processing (e.g., “smart casual for dinner”)
-External AI API integration:
	1. Backend sends wardrobe metadata (tags, categories, colors), current weather, and user prompt to the external AI service.
	2. External AI suggests outfit structures (e.g., “blue jeans + white shirt + sneakers” with rationale).
	3. System matches AI suggestions against the user’s wardrobe items (by category, color, tags).
-The final response to the frontend contains actual wardrobe items (images + metadata) paired with the AI’s rationale.
-Performance target: <3 seconds response time exclusive of external AI response latency

### 5. DAILY OUTFIT PLANNER
- Calendar-based outfit planning
- Date-specific outfit assignments
- Visual calendar interface
- Outfit retrieval by date

### 6. PERSONALIZATION & FEEDBACK
- Thumbs up/down feedback system
- 1-5 star rating system
- User preference vector updates using EMA (Exponential Moving Average)

### 7. TAG MANAGEMENT SYSTEM
- Canonical tag vocabulary
- Bulk tag operations (up to 50 items)
- Tag suggestion system
- Duplicate prevention
- Tag propagation across wardrobe items

### 8. SECURITY & COMPLIANCE
- CSRF protection
- Input sanitization and validation
- Audit logging with user_id, timestamps, IPs
- Privacy policy integration
- GDPR/Australian Privacy Principles compliance

### 9. ACCESSIBILITY FEATURES
- Color contrast compliance (≥4.5:1)
- Semantic HTML structure
- ARIA labels and live regions

## DATABASE SCHEMA

### Core Tables:
1. **Users**: userId(UUID,PK), email(UNIQUE), passwordHash, name, emailVerified(BOOL), createdAt
2. **UserProfile**: userId(FK), stylePrefs(JSON), lastKnownLocation
3. **ClothingItems**: itemId(UUID,PK), userId(FK), imageData (BLOB), thumbData (BLOB), category, color, createdAt
4. **Tags**: tagId(UUID,PK), itemId(FK), tag
5. **OutfitSuggestions**: suggestionId(UUID,PK), userId(FK), prompt, weather(JSON), itemsIncluded(JSON), createdAt
6. **Planner**: planId(UUID,PK), userId(FK), date(UNIQUE per user), outfitIds(JSON), note, createdAt
7. **Feedback**: feedbackId(UUID,PK), userId(FK), outfitId, rating(INT), createdAt
8. **StyleVectors**: userId(PK,FK), vector(BLOB)

## API ENDPOINTS TO IMPLEMENT

### Authentication:
- POST /api/auth/register - User registration
- POST /api/auth/activate - Email activation
- POST /api/auth/login - User login
- POST /api/auth/logout - User logout
- POST /api/auth/reset-password - Password reset request
- POST /api/auth/reset-password-confirm - Password reset confirmation

### Wardrobe:
- GET /api/wardrobe - List user's wardrobe items
- POST /api/wardrobe - Upload new clothing item
- GET /api/wardrobe/{itemId} - Get specific item details
- PUT /api/wardrobe/{itemId} - Update clothing item
- DELETE /api/wardrobe/{itemId} - Delete clothing item
- GET /api/wardrobe/search?q=query&category=top&color=blue - Search/filter wardrobe

### Recommendations:
-GET /api/recommendations?location=City&prompt=smart+casual
-Fetch current weather from weather API
-Collect wardrobe metadata (tags, colors, categories)
-Forward weather + user prompt + wardrobe metadata to external AI API
-Receive AI outfit structures + rationales
-Map suggestions to actual wardrobe items from user’s collection
-Return final outfit suggestions (wardrobe items + rationales)

### Planner:
- GET /api/planner - Get planned outfits
- POST /api/planner - Save planned outfit
- PUT /api/planner/{planId} - Update planned outfit
- DELETE /api/planner/{planId} - Delete planned outfit

### Feedback:
- POST /api/feedback - Submit outfit feedback

### Tags:
- GET /api/tags - Get all user tags
- POST /api/tags - Create new tag
- PUT /api/tags/{tagId} - Update tag
- DELETE /api/tags/{tagId} - Delete tag

## EXTERNAL SERVICES (Use xxxxxx placeholders)

### Computer Vision API:
- Service: YOLOv8/TensorFlow Lite for image classification
- Endpoint: xxxxxx
- API Key: xxxxxx
- Features: Object detection, color analysis, category classification

### Weather API:
- Service: OpenWeatherMap or similar
- Endpoint: xxxxxx
- API Key: xxxxxx
- Features: Current weather, location-based forecasts

###AI Recommendation API:
-Service: External AI provider (e.g., OpenAI, Anthropic, etc.)
-Endpoint: xxxxxx
-API Key: xxxxxx
-Features: Accepts structured wardrobe metadata, weather, and user prompts → returns outfit concepts with rationales (system then selects wardrobe items to match)

### Email Service:
- Service: SMTP
- API Key: xxxxxx
- SMTP Settings: xxxxxx
- Features: Activation emails, password reset emails

### Image Storage:
- Service: 
- Bucket: xxxxxx
- Access Key: xxxxxx
- Secret Key: xxxxxx

## DJANGO PROJECT STRUCTURE

```
stylist_project/
├── manage.py
├── stylist_project/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── asgi.py
├── apps/
│   ├── authentication/
│   ├── wardrobe/
│   ├── recommendations/
│   ├── planner/
│   ├── feedback/
│   └── common/
├── templates/
├── static/
├── media/
└── requirements.txt
```

## FRONTEND PAGES TO CREATE

1. **Homepage**: Landing page with login/register options
2. **Registration**: User signup form with validation
3. **Activation**: Email activation confirmation page
4. **Login**: User authentication form
5. **Dashboard**: Main user interface with overview
6. **Wardrobe**: Grid view of clothing items with search/filter
7. **Upload**: Drag-and-drop image upload interface
8. **Item Detail**: Individual clothing item view/edit
9. **Style Me**: Recommendation request and results page
10. **Planner**: Calendar-based outfit planning interface
11. **Settings**: Account settings and preferences
12. **Password Reset**: Password reset request and confirmation

## UI/UX DESIGN PRINCIPLES
- Responsive design (mobile-first approach)
- Clean, modern interface
- Intuitive navigation
- Progressive disclosure for advanced features
- Clear feedback on user actions
- Loading states and progress indicators
- Error handling with user-friendly messages
- Consistent color scheme and typography
- Touch-friendly interface elements

## PERFORMANCE REQUIREMENTS
- Page load time: <2 seconds for 95% of requests
- API response time: <300ms for GET endpoints
- Recommendation generation: <3 seconds
- Image upload: Progress indication, compression
- Database optimization with proper indexing
- Caching strategy for frequently accessed data

## TESTING REQUIREMENTS
- Unit tests for all models and business logic
- Integration tests for API endpoints
- Frontend functionality tests
- Security penetration testing
- Accessibility testing with Axe/Lighthouse
- Performance testing under load
- Cross-browser compatibility testing

## DEPLOYMENT CONSIDERATIONS
- Environment-specific settings (dev/staging/prod)
- Docker containerization
- Static file serving (CDN)
- Database migrations
- Environment variables for sensitive data
- Monitoring and logging setup
- Backup and recovery procedures

## SUCCESS CRITERIA
- User can register and activate account via email
- Users can upload images and receive AI-generated tags
- Weather-aware recommendations work correctly
- Outfit planner saves and retrieves correctly
- Feedback system updates user preferences
- Search and filtering work accurately
- All security requirements are met
- WCAG 2.1 AA accessibility compliance achieved
- Performance targets are met under expected load

## FUTURE ENHANCEMENTS (Out of Scope)
- Native mobile app
- Social/community features
- AR try-on functionality
- E-commerce integration
- Monetization features
- Advanced analytics dashboard
